"""

Camera image decoding.

"""

import numpy as np

from . import util
from . import protocol_encoder


__all__ = [
    "RESOLUTIONS",

    "CameraConfig",

    "minigray_to_jpeg",
    "minicolor_to_jpeg",
]


#: Camera resolutions.
RESOLUTIONS = {
    protocol_encoder.ImageResolution.VerificationSnapshot: (16, 16),
    protocol_encoder.ImageResolution.QQQQVGA: (40, 30),
    protocol_encoder.ImageResolution.QQQVGA: (80, 60),
    protocol_encoder.ImageResolution.QQVGA: (160, 120),
    protocol_encoder.ImageResolution.QVGA: (320, 240),
    protocol_encoder.ImageResolution.CVGA: (400, 296),
    protocol_encoder.ImageResolution.VGA: (640, 480),
    protocol_encoder.ImageResolution.SVGA: (800, 600),
    protocol_encoder.ImageResolution.XGA: (1024, 768),
    protocol_encoder.ImageResolution.SXGA: (1280, 960),
    protocol_encoder.ImageResolution.UXGA: (1600, 1200),
    protocol_encoder.ImageResolution.QXGA: (2048, 1536),
    protocol_encoder.ImageResolution.QUXGA: (3200, 2400)
}


class CameraConfig:
    """ Robot camera fixed property representation. """

    def __init__(self,
                 focal_length_x: float,
                 focal_length_y: float,
                 center_x: float,
                 center_y: float,
                 fov_x_deg: float,
                 fov_y_deg: float,
                 min_exposure_time_ms: int,
                 max_exposure_time_ms: int,
                 min_gain: float,
                 max_gain: float):
        self.focal_length = util.Vector2(focal_length_x, focal_length_y)
        self.center = util.Vector2(center_x, center_y)
        self.fov_x = util.Angle(degrees=fov_x_deg)
        self.fov_y = util.Angle(degrees=fov_y_deg)
        self.min_exposure_time_ms = int(min_exposure_time_ms)
        self.max_exposure_time_ms = int(max_exposure_time_ms)
        self.min_gain = float(min_gain)
        self.max_gain = float(max_gain)

    def get_camera_matrix(self) -> np.array:
        """ Return 3x3 camera matrix in format, suitable for use with OpenCV. """
        camera_matrix = np.array([
            [self.focal_length.x, 0.0, self.center.x],
            [0.0, self.focal_length.y, self.center.y],
            [0.0, 0.0, 1.0],
        ])
        return camera_matrix


def minigray_to_jpeg(minigray, width, height):
    """ Converts miniGrayToJpeg format to normal JPEG format. """
    header50 = np.array([
        0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x10, 0x0B, 0x0C, 0x0E, 0x0C, 0x0A, 0x10,
        # // 0x19 = QTable
        0x0E, 0x0D, 0x0E, 0x12, 0x11, 0x10, 0x13, 0x18, 0x28, 0x1A, 0x18, 0x16, 0x16, 0x18, 0x31, 0x23,
        0x25, 0x1D, 0x28, 0x3A, 0x33, 0x3D, 0x3C, 0x39, 0x33, 0x38, 0x37, 0x40, 0x48, 0x5C, 0x4E, 0x40,
        0x44, 0x57, 0x45, 0x37, 0x38, 0x50, 0x6D, 0x51, 0x57, 0x5F, 0x62, 0x67, 0x68, 0x67, 0x3E, 0x4D,

        # //0x71, 0x79, 0x70, 0x64, 0x78, 0x5C, 0x65, 0x67, 0x63, 0xFF, 0xC0, 0x00, 0x0B, 0x08, 0x00, 0xF0,
        0x71, 0x79, 0x70, 0x64, 0x78, 0x5C, 0x65, 0x67, 0x63, 0xFF, 0xC0, 0x00, 0x0B, 0x08, 0x01, 0x28,
        # // 0x5E = Height x Width

        # //0x01, 0x40, 0x01, 0x01, 0x11, 0x00, 0xFF, 0xC4, 0x00, 0xD2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01,
        0x01, 0x90, 0x01, 0x01, 0x11, 0x00, 0xFF, 0xC4, 0x00, 0xD2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01,

        0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
        0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03,
        0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
        0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08,
        0x23, 0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16,
        0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
        0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
        0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
        0x7A, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
        0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6,
        0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4,
        0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA,
        0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xDA, 0x00, 0x08, 0x01, 0x01,
        0x00, 0x00, 0x3F, 0x00
    ], dtype=np.uint8)

    return mini_to_jpeg_helper(minigray, width, height, header50)


def minicolor_to_jpeg(minicolor, width, height):
    """ Converts miniColorToJpeg format to normal JPEG format. """
    header = np.array([
        0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x10, 0x0B, 0x0C, 0x0E, 0x0C, 0x0A, 0x10,
        # 0x19 = QTable
        0x0E, 0x0D, 0x0E, 0x12, 0x11, 0x10, 0x13, 0x18, 0x28, 0x1A, 0x18, 0x16, 0x16, 0x18, 0x31, 0x23,
        0x25, 0x1D, 0x28, 0x3A, 0x33, 0x3D, 0x3C, 0x39, 0x33, 0x38, 0x37, 0x40, 0x48, 0x5C, 0x4E, 0x40,
        0x44, 0x57, 0x45, 0x37, 0x38, 0x50, 0x6D, 0x51, 0x57, 0x5F, 0x62, 0x67, 0x68, 0x67, 0x3E, 0x4D,
        0x71, 0x79, 0x70, 0x64, 0x78, 0x5C, 0x65, 0x67, 0x63, 0xFF, 0xC0, 0x00, 17,  # 8+3*components
        0x08, 0x00, 0xF0,  # 0x5E = Height x Width
        0x01, 0x40,
        0x03,  # 3 components
        0x01, 0x21, 0x00,  # Y 2x1 res
        0x02, 0x11, 0x00,  # Cb
        0x03, 0x11, 0x00,  # Cr
        0xFF, 0xC4, 0x00, 0xD2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
        0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03,
        0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
        0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08,
        0x23, 0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16,
        0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
        0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
        0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
        0x7A, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
        0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6,
        0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4,
        0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA,
        0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA,
        0xFF, 0xDA, 0x00, 12,
        0x03,  # 3 components
        0x01, 0x00,  # Y
        0x02, 0x00,  # Cb same AC/DC
        0x03, 0x00,  # Cr same AC/DC
        0x00, 0x3F, 0x00
    ], dtype=np.uint8)

    return mini_to_jpeg_helper(minicolor, width, height, header)


def mini_to_jpeg_helper(mini, width, height, header):
    """ Low-level mini*ToJpeg format to normal JPEG format conversion. """
    buffer_in = mini.tolist()
    curr_len = len(mini)

    header_length = len(header)
    # For worst case expansion
    buffer_out = np.array([0] * (curr_len * 2 + header_length), dtype=np.uint8)

    for i in range(header_length):
        buffer_out[i] = header[i]

    buffer_out[0x5e] = height >> 8
    buffer_out[0x5f] = height & 0xff
    buffer_out[0x60] = width >> 8
    buffer_out[0x61] = width & 0xff
    # Remove padding at the end
    while buffer_in[curr_len - 1] == 0xff:
        curr_len -= 1

    off = header_length
    for i in range(curr_len - 1):
        buffer_out[off] = buffer_in[i + 1]
        off += 1
        if buffer_in[i + 1] == 0xff:
            buffer_out[off] = 0
            off += 1

    buffer_out[off] = 0xff
    off += 1
    buffer_out[off] = 0xD9

    return np.asarray(buffer_out)
